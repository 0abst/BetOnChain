/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace BetOnChain {
  export type AchievementRequirementStruct = {
    beginnerNumberOfBets: PromiseOrValue<BigNumberish>;
    warriorNumberOfBets: PromiseOrValue<BigNumberish>;
    expertNumberOfBets: PromiseOrValue<BigNumberish>;
  };

  export type AchievementRequirementStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    beginnerNumberOfBets: BigNumber;
    warriorNumberOfBets: BigNumber;
    expertNumberOfBets: BigNumber;
  };

  export type AchievementURIStruct = {
    beginner: PromiseOrValue<string>;
    warrior: PromiseOrValue<string>;
    expert: PromiseOrValue<string>;
  };

  export type AchievementURIStructOutput = [string, string, string] & {
    beginner: string;
    warrior: string;
    expert: string;
  };
}

export interface BetOnChainInterface extends utils.Interface {
  functions: {
    "bet(uint256,uint256)": FunctionFragment;
    "bets(uint256)": FunctionFragment;
    "bocNFT()": FunctionFragment;
    "bocToken()": FunctionFragment;
    "getAchievementRequirement()": FunctionFragment;
    "getAchievementURI()": FunctionFragment;
    "getBetPositionURI()": FunctionFragment;
    "mintBeginnerNft()": FunctionFragment;
    "mintExpertNft()": FunctionFragment;
    "mintWarriorNft()": FunctionFragment;
    "numberOfBets(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAchievementRequirement(uint256,uint256,uint256)": FunctionFragment;
    "setAchievementURI(string,string,string)": FunctionFragment;
    "setBetPositionURI(string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bet"
      | "bets"
      | "bocNFT"
      | "bocToken"
      | "getAchievementRequirement"
      | "getAchievementURI"
      | "getBetPositionURI"
      | "mintBeginnerNft"
      | "mintExpertNft"
      | "mintWarriorNft"
      | "numberOfBets"
      | "owner"
      | "renounceOwnership"
      | "setAchievementRequirement"
      | "setAchievementURI"
      | "setBetPositionURI"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bet",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "bocNFT", values?: undefined): string;
  encodeFunctionData(functionFragment: "bocToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAchievementRequirement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAchievementURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBetPositionURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintBeginnerNft",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintExpertNft",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintWarriorNft",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfBets",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAchievementRequirement",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAchievementURI",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setBetPositionURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "bet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bocNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bocToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAchievementRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAchievementURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBetPositionURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintBeginnerNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintExpertNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWarriorNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfBets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAchievementRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAchievementURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBetPositionURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface BetOnChain extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BetOnChainInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bet(
      betAmount: PromiseOrValue<BigNumberish>,
      betFor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        player: string;
        betAmount: BigNumber;
        betFor: BigNumber;
        nftId: BigNumber;
      }
    >;

    bocNFT(overrides?: CallOverrides): Promise<[string]>;

    bocToken(overrides?: CallOverrides): Promise<[string]>;

    getAchievementRequirement(
      overrides?: CallOverrides
    ): Promise<[BetOnChain.AchievementRequirementStructOutput]>;

    getAchievementURI(
      overrides?: CallOverrides
    ): Promise<[BetOnChain.AchievementURIStructOutput]>;

    getBetPositionURI(overrides?: CallOverrides): Promise<[string]>;

    mintBeginnerNft(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintExpertNft(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintWarriorNft(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    numberOfBets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAchievementRequirement(
      beginnerNumberOfBets: PromiseOrValue<BigNumberish>,
      warriorNumberOfBets: PromiseOrValue<BigNumberish>,
      expertNumberOfBets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAchievementURI(
      beginnerURI: PromiseOrValue<string>,
      warriorURI: PromiseOrValue<string>,
      expertURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBetPositionURI(
      _betPositionURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  bet(
    betAmount: PromiseOrValue<BigNumberish>,
    betFor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bets(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      player: string;
      betAmount: BigNumber;
      betFor: BigNumber;
      nftId: BigNumber;
    }
  >;

  bocNFT(overrides?: CallOverrides): Promise<string>;

  bocToken(overrides?: CallOverrides): Promise<string>;

  getAchievementRequirement(
    overrides?: CallOverrides
  ): Promise<BetOnChain.AchievementRequirementStructOutput>;

  getAchievementURI(
    overrides?: CallOverrides
  ): Promise<BetOnChain.AchievementURIStructOutput>;

  getBetPositionURI(overrides?: CallOverrides): Promise<string>;

  mintBeginnerNft(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintExpertNft(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintWarriorNft(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  numberOfBets(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAchievementRequirement(
    beginnerNumberOfBets: PromiseOrValue<BigNumberish>,
    warriorNumberOfBets: PromiseOrValue<BigNumberish>,
    expertNumberOfBets: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAchievementURI(
    beginnerURI: PromiseOrValue<string>,
    warriorURI: PromiseOrValue<string>,
    expertURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBetPositionURI(
    _betPositionURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bet(
      betAmount: PromiseOrValue<BigNumberish>,
      betFor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    bets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        player: string;
        betAmount: BigNumber;
        betFor: BigNumber;
        nftId: BigNumber;
      }
    >;

    bocNFT(overrides?: CallOverrides): Promise<string>;

    bocToken(overrides?: CallOverrides): Promise<string>;

    getAchievementRequirement(
      overrides?: CallOverrides
    ): Promise<BetOnChain.AchievementRequirementStructOutput>;

    getAchievementURI(
      overrides?: CallOverrides
    ): Promise<BetOnChain.AchievementURIStructOutput>;

    getBetPositionURI(overrides?: CallOverrides): Promise<string>;

    mintBeginnerNft(overrides?: CallOverrides): Promise<void>;

    mintExpertNft(overrides?: CallOverrides): Promise<void>;

    mintWarriorNft(overrides?: CallOverrides): Promise<void>;

    numberOfBets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAchievementRequirement(
      beginnerNumberOfBets: PromiseOrValue<BigNumberish>,
      warriorNumberOfBets: PromiseOrValue<BigNumberish>,
      expertNumberOfBets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAchievementURI(
      beginnerURI: PromiseOrValue<string>,
      warriorURI: PromiseOrValue<string>,
      expertURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBetPositionURI(
      _betPositionURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    bet(
      betAmount: PromiseOrValue<BigNumberish>,
      betFor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bocNFT(overrides?: CallOverrides): Promise<BigNumber>;

    bocToken(overrides?: CallOverrides): Promise<BigNumber>;

    getAchievementRequirement(overrides?: CallOverrides): Promise<BigNumber>;

    getAchievementURI(overrides?: CallOverrides): Promise<BigNumber>;

    getBetPositionURI(overrides?: CallOverrides): Promise<BigNumber>;

    mintBeginnerNft(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintExpertNft(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintWarriorNft(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    numberOfBets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAchievementRequirement(
      beginnerNumberOfBets: PromiseOrValue<BigNumberish>,
      warriorNumberOfBets: PromiseOrValue<BigNumberish>,
      expertNumberOfBets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAchievementURI(
      beginnerURI: PromiseOrValue<string>,
      warriorURI: PromiseOrValue<string>,
      expertURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBetPositionURI(
      _betPositionURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bet(
      betAmount: PromiseOrValue<BigNumberish>,
      betFor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bocNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bocToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAchievementRequirement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAchievementURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBetPositionURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintBeginnerNft(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintExpertNft(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintWarriorNft(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    numberOfBets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAchievementRequirement(
      beginnerNumberOfBets: PromiseOrValue<BigNumberish>,
      warriorNumberOfBets: PromiseOrValue<BigNumberish>,
      expertNumberOfBets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAchievementURI(
      beginnerURI: PromiseOrValue<string>,
      warriorURI: PromiseOrValue<string>,
      expertURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBetPositionURI(
      _betPositionURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
